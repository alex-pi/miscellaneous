History

The concept was first introduced as a position tree by Weiner (1973), which Donald Knuth subsequently characterized as "Algorithm of the Year 1973". The construction was greatly simplified by McCreight (1976) , and also by Ukkonen (1995).[1] Ukkonen provided the first online-construction of suffix trees, now known as Ukkonen's algorithm, with running time that matched the then fastest algorithms. These algorithms are all linear-time for a constant-size alphabet, and have worst-case running time of  in general.
Farach (1997) gave the first suffix tree construction algorithm that is optimal for all alphabets. In particular, this is the first linear-time algorithm for strings drawn from an alphabet of integers in a polynomial range. Farach's algorithm has become the basis for new algorithms for constructing both suffix trees and suffix arrays, for example, in external memory, compressed, succinct, etc.
[edit]Definition

The suffix tree for the string  of length  is defined as a tree such that:[2]
the paths from the root to the leaves have a one-to-one relationship with the suffixes of ,
edges spell non-empty strings,
and all internal nodes (except perhaps the root) have at least two children.
Since such a tree does not exist for all strings,  is padded with a terminal symbol not seen in the string (usually denoted $). This ensures that no suffix is a prefix of another, and that there will be  leaf nodes, one for each of the  suffixes of . Since all internal non-root nodes are branching, there can be at most n −  1 such nodes, and n + (n − 1) + 1 = 2n nodes in total (n leaves, n − 1 internal nodes, 1 root).
Suffix links are a key feature for older linear-time construction algorithms, although most newer algorithms, which are based on Farach's algorithm, dispense with suffix links. In a complete suffix tree, all internal non-root nodes have a suffix link to another internal node. If the path from the root to a node spells the string , where  is a single character and  is a string (possibly empty), it has a suffix link to the internal node representing . See for example the suffix link from the node for ANA to the node for NA in the figure above. Suffix links are also used in some algorithms running on the tree.
[edit]Generalized suffix tree

A generalized suffix tree is a suffix tree made for a set of words instead only for a single word. It represents all suffixes from this set of words. Each word must be terminated by a different termination symbol or word.
[edit]Functionality

A suffix tree for a string  of length  can be built in  time, if the letters come from an alphabet of integers in a polynomial range (in particular, this is true for constant-sized alphabets).[3] For larger alphabets, the running time is dominated by first sorting the letters to bring them into a range of size ; in general, this takes  time. The costs below are given under the assumption that the alphabet is constant.
Assume that a suffix tree has been built for the string  of length , or that a generalised suffix tree has been built for the set of strings  of total length . You can:
Search for strings:
Check if a string  of length  is a substring in  time.[4]
Find the first occurrence of the patterns  of total length  as substrings in  time.
Find all  occurrences of the patterns  of total length  as substrings in  time.[5]
Search for a regular expression P in time expected sublinear in .[6]
Find for each suffix of a pattern , the length of the longest match between a prefix of  and a substring in  in  time.[7] This is termed the matching statistics for .
Find properties of the strings:
Find the longest common substrings of the string  and  in  time.[8]
Find all maximal pairs, maximal repeats or supermaximal repeats in  time.[9]
Find the Lempel–Ziv decomposition in  time.[10]
Find the longest repeated substrings in  time.
Find the most frequently occurring substrings of a minimum length in  time.
Find the shortest strings from  that do not occur in , in  time, if there are  such strings.
Find the shortest substrings occurring only once in  time.
Find, for each , the shortest substrings of  not occurring elsewhere in  in  time.
The suffix tree can be prepared for constant time lowest common ancestor retrieval between nodes in  time.[11] One can then also:
Find the longest common prefix between the suffixes  and  in .[12]
Search for a pattern P of length m with at most k mismatches in  time, where z is the number of hits.[13]
Find all  maximal palindromes in ,[14], or  time if gaps of length  are allowed, or  if  mismatches are allowed.[15]
Find all  tandem repeats in , and k-mismatch tandem repeats in .[16]
Find the longest substrings common to at least  strings in  for  in  time.[17]
Find the longest palindromic substring of a given string (using the suffix trees of both the string and its reverse) in linear time.[18]
[edit]Applications

Suffix trees can be used to solve a large number of string problems that occur in text-editing, free-text search, computational biology and other application areas.[19] Primary applications include:[19]
String search, in O(m) complexity, where m is the length of the sub-string (but with initial O(n) time required to build the suffix tree for the string)
Finding the longest repeated substring
Finding the longest common substring
Finding the longest palindrome in a string
Suffix trees are often used in bioinformatics applications, searching for patterns in DNA or protein sequences (which can be viewed as long strings of characters). The ability to search efficiently with mismatches might be considered their greatest strength. Suffix trees are also used in data compression; they can be used to find repeated data, and can be used for the sorting stage of the Burrows–Wheeler transform. Variants of the LZW compression schemes use suffix trees (LZSS). A suffix tree is also used in suffix tree clustering, a data clustering algorithm used in some search engines.[20]
[edit]Implementation

If each node and edge can be represented in  space, the entire tree can be represented in  space. The total length of all the strings on all of the edges in the tree is , but each edge can be stored as the position and length of a substring of S, giving a total space usage of  computer words. The worst-case space usage of a suffix tree is seen with a fibonacci word, giving the full  nodes.
An important choice when making a suffix tree implementation is the parent-child relationships between nodes. The most common is using linked lists called sibling lists. Each node has a pointer to its first child, and to the next node in the child list it is a part of. Hash maps, sorted/unsorted arrays (with array doubling), and balanced search trees may also be used, giving different running time properties. We are interested in:
The cost of finding the child on a given character.
The cost of inserting a child.
The cost of enlisting all children of a node (divided by the number of children in the table below).
Let  be the size of the alphabet. Then you have the following costs:
Alex PiAlex PiAlex PiAlex PiAlex Pi01/01/2012Alex Pi01/01/2012Alex Pi01/01/2012Alex Pi01/01/2012Alex PiAlex PiAlex PiAlex PiAlex PiAlex PiAlex PiAlex PiAlex PiAlex PiAdios
